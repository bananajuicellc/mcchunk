name: Deploy Leptos App to GitHub Pages

on:
  push:
    branches:
      - main-leptos # Assuming a different branch for this version, or adjust as needed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install cargo-leptos
        run: cargo install --locked cargo-leptos

      # The cargo-leptos tool expects the main code to be in a lib.rs for wasm builds,
      # and a separate main.rs for the server binary (if any).
      # Our current setup has everything in main.rs for CSR.
      # We might need to adjust the project structure or build command if cargo-leptos build complains.
      # For a pure CSR app, wasm-pack might be more direct if cargo-leptos proves difficult.
      # However, `cargo leptos build --release` should ideally build the frontend assets.
      # The output path for cargo-leptos is usually target/site/
      # We need to copy our custom index.html and style.css to the site root before build,
      # or configure cargo-leptos to use them.
      # For simplicity, let's assume cargo-leptos build will package things correctly for CSR.
      # We'll also need to ensure our index.html correctly references the generated JS.
      # `cargo-leptos` usually generates its own index.html that loads the wasm.
      # We will need to ensure our `index.html` is either used or its content is reflected.

      - name: Build Leptos app
        working-directory: ./leptos-form-example
        run: cargo leptos build --release
        env:
          RUST_LOG: "info" # Optional: for more detailed build logs

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./leptos-form-example/target/site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
```

This workflow attempts to:
1.  Checkout code.
2.  Install Rust & wasm32 target.
3.  Install `wasm-pack`.
4.  Install `cargo-leptos`.
5.  Run `cargo leptos build --release` in the `leptos-form-example` directory. This should produce output in `leptos-form-example/target/site/`.
6.  Copy `style.css` to the output directory (`leptos-form-example/target/site/style.css`).
7.  Deploy the contents of `leptos-form-example/target/site/` to GitHub Pages.

**Important Considerations & Next Steps:**

*   **`Cargo.toml` metadata:** For `cargo leptos build` to correctly use our `index.html` as a template and include our `style.css`, we need to add a `[package.metadata.leptos]` section to `leptos-form-example/Cargo.toml`. I will do this in the next action.
    *   `index-file = "index.html"`
    *   `style-file = "style.css"`
    *   `output-name = "app"` (or keep default which is crate name `leptos_form_example`) - this determines the `.js` and `.wasm` file names.
*   **Paths in `index.html`:** The paths generated by `cargo leptos build` inside the `index.html` (for JS, WASM, CSS) must be relative (e.g., `./pkg/app.js`, `./style.css`) to work correctly when deployed to a subdirectory on GitHub Pages (like `username.github.io/repo-name/`). The default `cargo-leptos` behavior with the right metadata usually handles this.
*   **Branch Name:** The workflow is set to trigger on `main-leptos`. This should be the branch where this Leptos code resides.

I'll proceed to add the metadata to `Cargo.toml` after this file is created.
